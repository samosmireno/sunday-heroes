// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum CompetitionType {
  LEAGUE
  DUEL
  KNOCKOUT
}

enum MatchType {
  FIVE_A_SIDE
  SIX_A_SIDE
  SEVEN_A_SIDE
  ELEVEN_A_SIDE
}

enum VotingStatus {
  OPEN
  CLOSED
}

enum Role {
  ADMIN
  MODERATOR
  PLAYER
}

model User {
  id             String     @id @default(uuid())
  email          String    @unique
  givenName     String
  familyName    String?
  role           Role       @default(PLAYER)
  isRegistered  Boolean    @default(false)
  lastLogin     DateTime?
  createdAt     DateTime   @default(now())

  refreshTokens         RefreshToken[]
  dashboard             Dashboard?
  dashboardPlayers     DashboardPlayer[]
  sentInvitations DashboardInvitation[] @relation("InvitedByUser")
  usedInvitations DashboardInvitation[] @relation("UsedByUser")

  @@index([email])
  @@index([role])
}

model RefreshToken {
  id           String   @id @default(uuid())
  userId      String
  token        String   @unique
  expiresAt   DateTime
  lastUsedAt DateTime
  createdAt   DateTime @default(now())

  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([token])
}

model Dashboard {
  id         String   @id @default(uuid())
  name       String
  adminId   String   @unique
  createdAt DateTime @default(now())

  admin        User          @relation(fields: [adminId], references: [id], onDelete: Cascade)
  competitions Competition[]
  dashboardPlayers DashboardPlayer[]

  @@index([adminId])
}

model DashboardPlayer {
  id           String   @id @default(uuid())
  dashboardId String
  userId      String?
  nickname     String
  createdAt   DateTime @default(now())
  
  dashboard             Dashboard                 @relation(fields: [dashboardId], references: [id],onDelete: Cascade)
  user                  User?                     @relation(fields: [userId], references: [id])
  matchPlayers        MatchPlayer[]
  moderatedCompetitions CompetitionModerator[]
  votesGiven           PlayerVote[]              @relation("VoterToVote")
  invitations         DashboardInvitation[]
  teamRosters         TeamRoster[]

  @@unique([dashboardId, nickname])
  @@index([dashboardId])
  @@index([userId])
  @@index([dashboardId, userId])
}

model Competition {
  id                          String          @id @default(uuid())
  dashboardId                String
  name                        String
  type                        CompetitionType
  trackSeasons              Boolean         @default(false)
  currentSeason             Int             @default(1)
  minPlayers                Int
  votingEnabled             Boolean         @default(false)
  votingPeriodDays         Int?
  knockoutVotingPeriodDays Int?
  reminderDays              Int?
  isRoundRobin          Boolean?
  createdAt                 DateTime        @default(now())

  dashboard     Dashboard              @relation(fields: [dashboardId], references: [id], onDelete: Cascade)
  moderators    CompetitionModerator[]
  teamCompetitions TeamCompetition[]
  matches       Match[]
  teamRosters  TeamRoster[]

  @@index([dashboardId])
}

model CompetitionModerator {
  id             String   @id @default(uuid())
  competitionId String
  dashboardPlayerId String
  createdAt     DateTime @default(now())

  competition    Competition @relation(fields: [competitionId], references: [id], onDelete: Cascade)
  dashboardPlayer DashboardPlayer @relation(fields: [dashboardPlayerId], references: [id], onDelete: Cascade)

  @@unique([competitionId, dashboardPlayerId])
  @@index([competitionId])
  @@index([dashboardPlayerId])
}

model Team {
  id         String   @id @default(uuid())
  name       String   
  createdAt DateTime @default(now())

  teamCompetitions TeamCompetition[]
  matchTeams      MatchTeam[]
  matchPlayers   MatchPlayer[]
  teamRosters     TeamRoster[]

  @@index([name])
}

model TeamCompetition {
  id             String   @id @default(uuid())
  teamId        String
  competitionId String
  points         Int      @default(0)
  wins           Int      @default(0)
  draws          Int      @default(0)
  losses         Int      @default(0)
  goalsFor      Int      @default(0)
  goalsAgainst  Int      @default(0)
  createdAt     DateTime @default(now())

  team           Team        @relation(fields: [teamId], references: [id], onDelete: Cascade)
  competition    Competition @relation(fields: [competitionId], references: [id], onDelete: Cascade)

  @@unique([teamId, competitionId])
  @@index([teamId])
  @@index([competitionId])
}

model Match {
  id                String      @id @default(uuid())
  competitionId    String
  matchType        MatchType
  date              DateTime?
  homeTeamScore   Int        @default(0)
  awayTeamScore   Int        @default(0)
  penaltyHomeScore Int?
  penaltyAwayScore Int?
  round             Int
  bracketPosition  Int?
  votingStatus     VotingStatus @default(OPEN)
  votingEndsAt    DateTime?
  createdAt        DateTime     @default(now())
  isCompleted      Boolean      @default(false)


  competition    Competition  @relation(fields: [competitionId], references: [id], onDelete: Cascade)
  matchTeams    MatchTeam[]
  matchPlayers MatchPlayer[]
  playerVotes   PlayerVote[]

  @@index([competitionId])
}

model MatchTeam {
  id        String   @id @default(uuid())
  matchId   String
  teamId    String
  isHome    Boolean
  createdAt DateTime @default(now())

  match      Match     @relation(fields: [matchId], references: [id],onDelete: Cascade)
  team       Team      @relation(fields: [teamId], references: [id],onDelete: Cascade)

  @@unique([matchId, teamId])
  @@index([matchId])
  @@index([teamId])
}

model MatchPlayer {
  id             String   @id @default(uuid())
  matchId       String
  dashboardPlayerId String
  teamId        String
  isHome        Boolean
  goals          Int      @default(0)
  assists        Int      @default(0)
  penaltyScored Boolean? 
  position       Int
  createdAt     DateTime @default(now())

  match         Match        @relation(fields: [matchId], references: [id], onDelete: Cascade)
  dashboardPlayer DashboardPlayer @relation(fields: [dashboardPlayerId], references: [id], onDelete: Cascade)
  team          Team         @relation(fields: [teamId], references: [id],onDelete: Cascade)
  receivedVotes PlayerVote[] 

  @@unique([matchId, dashboardPlayerId])
  @@index([matchId])
  @@index([dashboardPlayerId])
  @@index([teamId])
  @@index([isHome])
}

model PlayerVote {
  id              String   @id @default(uuid())
  matchId        String
  voterId        String
  matchPlayerId String
  points          Int
  createdAt      DateTime @default(now())

  match          Match       @relation(fields: [matchId], references: [id], onDelete: Cascade)
  voter          DashboardPlayer @relation("VoterToVote", fields: [voterId], references: [id],onDelete: Cascade)
  matchPlayer   MatchPlayer @relation(fields: [matchPlayerId], references: [id], onDelete: Cascade)

  @@unique([matchId, voterId, matchPlayerId])
  @@index([matchId])
  @@index([voterId])
  @@index([matchPlayerId])
}

model DashboardInvitation {
  id                  String    @id @default(uuid())
  invitedById       String
  dashboardPlayerId String
  inviteToken        String    @unique
  email               String?
  expiresAt          DateTime
  usedAt             DateTime?
  usedByUserId     String?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt

  invitedBy          User             @relation("InvitedByUser", fields: [invitedById], references: [id])
  dashboardPlayer    DashboardPlayer  @relation(fields: [dashboardPlayerId], references: [id], onDelete: Cascade)
  usedByUser        User?            @relation("UsedByUser", fields: [usedByUserId], references: [id])

  @@index([inviteToken])
  @@index([dashboardPlayerId])
  @@index([expiresAt])
}

model TeamRoster {
  id                  String   @id @default(uuid())
  teamId            String
  dashboardPlayerId String
  competitionId     String
  createdAt         DateTime @default(now())

  team               Team             @relation(fields: [teamId], references: [id], onDelete: Cascade)
  dashboardPlayer   DashboardPlayer  @relation(fields: [dashboardPlayerId], references: [id], onDelete: Cascade)
  competition        Competition      @relation(fields: [competitionId], references: [id], onDelete: Cascade)

  @@unique([teamId, dashboardPlayerId, competitionId])
  @@index([teamId, competitionId])
  @@index([dashboardPlayerId, competitionId])
}
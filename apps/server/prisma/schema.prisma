// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum CompetitionType {
  LEAGUE
  DUEL
  KNOCKOUT
}

enum MatchType {
  FIVE_A_SIDE
  SIX_A_SIDE
  SEVEN_A_SIDE
  ELEVEN_A_SIDE
}

enum VotingStatus {
  OPEN
  CLOSED
}

enum Role {
  ADMIN
  MODERATOR
  PLAYER
}

model User {
  id             String     @id @default(uuid())
  email          String?    @unique
  given_name     String?
  family_name    String?
  nickname       String     @unique
  role           Role       @default(PLAYER)
  is_registered  Boolean    @default(false)
  last_login     DateTime?
  created_at     DateTime   @default(now())

  refresh_tokens         RefreshToken[]
  dashboard             Dashboard?
  moderated_competitions CompetitionModerator[]
  match_players        MatchPlayer[]
  votes_given          PlayerVote[]      @relation("VoterToVote")

  @@index([email])
  @@index([nickname])
  @@index([role])
}

model RefreshToken {
  id           String   @id @default(uuid())
  user_id      String
  token        String   @unique
  expires_at   DateTime
  last_used_at DateTime
  created_at   DateTime @default(now())

  user         User     @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@index([user_id])
  @@index([token])
}

model Dashboard {
  id         String   @id @default(uuid())
  name       String
  admin_id   String   @unique
  created_at DateTime @default(now())

  admin        User          @relation(fields: [admin_id], references: [id])
  competitions Competition[]

  @@index([admin_id])
}

model Competition {
  id                          String          @id @default(uuid())
  dashboard_id                String
  name                        String
  type                        CompetitionType
  track_seasons              Boolean         @default(false)
  current_season             Int             @default(1)
  min_players                Int
  voting_enabled             Boolean         @default(false)
  voting_period_days         Int?
  knockout_voting_period_days Int?
  reminder_days              Int?
  created_at                 DateTime        @default(now())

  dashboard     Dashboard              @relation(fields: [dashboard_id], references: [id])
  moderators    CompetitionModerator[]
  team_competitions TeamCompetition[]
  matches       Match[]

  @@index([dashboard_id])
}

model CompetitionModerator {
  id             String   @id @default(uuid())
  competition_id String
  user_id        String
  created_at     DateTime @default(now())

  competition    Competition @relation(fields: [competition_id], references: [id])
  user           User        @relation(fields: [user_id], references: [id])

  @@unique([competition_id, user_id])
  @@index([competition_id])
  @@index([user_id])
}

model Team {
  id         String   @id @default(uuid())
  name       String   @unique
  created_at DateTime @default(now())

  team_competitions TeamCompetition[]
  match_teams      MatchTeam[]
  match_players   MatchPlayer[]

  @@index([name])
}

model TeamCompetition {
  id             String   @id @default(uuid())
  team_id        String
  competition_id String
  points         Int      @default(0)
  wins           Int      @default(0)
  draws          Int      @default(0)
  losses         Int      @default(0)
  goals_for      Int      @default(0)
  goals_against  Int      @default(0)
  created_at     DateTime @default(now())

  team           Team        @relation(fields: [team_id], references: [id])
  competition    Competition @relation(fields: [competition_id], references: [id])

  @@unique([team_id, competition_id])
  @@index([team_id])
  @@index([competition_id])
}

model Match {
  id                String      @id @default(uuid())
  competition_id    String
  match_type        MatchType
  date              DateTime
  home_team_score   Int        @default(0)
  away_team_score   Int        @default(0)
  penalty_home_score Int?
  penalty_away_score Int?
  round             Int
  bracket_position  Int?
  voting_status     VotingStatus @default(OPEN)
  voting_ends_at    DateTime?
  is_completed      Boolean      @default(false)
  created_at        DateTime     @default(now())

  competition    Competition  @relation(fields: [competition_id], references: [id])
  match_teams    MatchTeam[]
  matchPlayers MatchPlayer[]
  player_votes   PlayerVote[]

  @@index([competition_id])
}

model MatchTeam {
  id         String   @id @default(uuid())
  match_id   String
  team_id    String
  is_home    Boolean
  created_at DateTime @default(now())

  match      Match     @relation(fields: [match_id], references: [id])
  team       Team      @relation(fields: [team_id], references: [id])

  @@unique([match_id, team_id])
  @@index([match_id])
  @@index([team_id])
}

model MatchPlayer {
  id             String   @id @default(uuid())
  match_id       String
  player_id      String
  team_id        String
  is_home        Boolean
  goals          Int      @default(0)
  assists        Int      @default(0)
  penalty_scored Boolean? 
  position       Int
  created_at     DateTime @default(now())

  match         Match        @relation(fields: [match_id], references: [id], onDelete: Cascade)
  player        User         @relation(fields: [player_id], references: [id], onDelete: Cascade)
  team          Team         @relation(fields: [team_id], references: [id])
  received_votes PlayerVote[] 

  @@unique([match_id, player_id])
  @@index([match_id])
  @@index([player_id])
  @@index([team_id])
  @@index([is_home])
}

model PlayerVote {
  id              String   @id @default(uuid())
  match_id        String
  voter_id        String
  match_player_id String
  points          Int
  created_at      DateTime @default(now())

  match          Match       @relation(fields: [match_id], references: [id])
  voter          User        @relation("VoterToVote", fields: [voter_id], references: [id])
  player_match   MatchPlayer @relation(fields: [match_player_id], references: [id])

  @@unique([match_id, voter_id, match_player_id])
  @@index([match_id])
  @@index([voter_id])
  @@index([match_player_id])
}